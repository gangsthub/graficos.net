{
  "lang": "EN",
  "title": "How to Search for Emojis with Regular Expressions",
  "date": "2019-08-29T08:19:54.795Z",
  "thumbnail": "/images/uploads/my-post.png",
  "tags": [
    "js",
    "regexp",
    "emoji"
  ],
  "body": "Turns out the documentation on MDN wasn't complete for this piece. But there is such a thing as [Unicode property escapes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes). And I was astonished when i find out there is a shorthand for Emojis in there!\n\nI said it wasn't really complete because you need to pass the unicode flag (\\`u\\`) in your \\`RegExp\\` for this to work.\n\nHere's the code snippet.\n\n```\n'Hey, there! üå∏'.match(/\\p{Emoji}/u)\n```\n\n(Notice the \\`u\\` at the end.)\n\nAnd this will be the output:\n\n```\n[\"üå∏\", index: 12, input: \"Hey, there! üå∏\", groups: undefined]\n```\n\nThe first element in the Array is the actual \"match\".\n\nThere are special cases, tho. **Skin tones** for example, as you may know are a sum (or \"ligature\") of two characters [according to the unicode spec](https://www.unicode.org/reports/tr51/#Diversity): the **original emoji** ‚ûï a  [modifier](https://en.wikipedia.org/wiki/Miscellaneous_Symbols_and_Pictographs#Emoji_modifiers). \n\n![Output of an emoji including a skin tone number 4](/images/uploads/2019-08-29-10_54_59-window.png)\n\nThis case is a little bit trickier, because, you'll need to take into consideration also the modifiers:\n\n* üèª U+1F3FB ('\\uD83C\\uDFFB' in JS): \"Light\" (types 1 or 2 in the _Fitzpatrick Scale_)\n* üèº U+1F3FC ('\\uD83C\\uDFFC' in JS): \"Medium-Light\" (type 3)\n* üèΩ U+1F3FD ('\\uD83C\\uDFFD' in JS): \"Medium\" (type 4)\n* üèæ U+1F3FE ('\\uD83C\\uDFFE' in JS): \"Medium-Dark\" (type 5)\n* üèø U+1F3FF ('\\uD83C\\uDFFF' in JS): \"Dark\" (type 6)\n\nIn order to catch the modifiers, notice how I had to pass also the \\`g\\` flag to get \"all\" the emojis from the string (because Regexp in JS works that way, if the \"global\" flag is not passed it stops when the first match is reached).\n\nThis is way, way, handier than passing the unicode characters range that Emoji covers as many libraries do, IMO, so it was worth sharing with you!\n\nHappy emoji searching!",
  "description": "How to look for emojis in a string using Javascript Regular Expressions with a handy shorthand."
}